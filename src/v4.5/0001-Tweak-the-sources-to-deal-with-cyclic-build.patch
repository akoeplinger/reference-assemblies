From b5daf30fec1d6fb967bff0b1f0951411fd9b907f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Alexander=20K=C3=B6plinger?= <alex.koeplinger@outlook.com>
Date: Sat, 11 Mar 2017 00:12:32 +0100
Subject: [PATCH] Tweak the sources to deal with cyclic build

---
 src/v4.5/System.Configuration.cs           |  2 ++
 src/v4.5/System.ServiceModel.Activation.cs |  6 ++++++
 src/v4.5/System.Web.cs                     |  2 ++
 src/v4.5/System.Xml.cs                     |  2 ++
 src/v4.5/System.cs                         | 10 ++++++++++
 5 files changed, 22 insertions(+)

diff --git a/src/v4.5/System.Configuration.cs b/src/v4.5/System.Configuration.cs
index 994f124..45e136f 100644
--- a/src/v4.5/System.Configuration.cs
+++ b/src/v4.5/System.Configuration.cs
@@ -260,6 +260,7 @@ namespace System.Configuration
         public ConfigurationElementProperty(System.Configuration.ConfigurationValidatorBase validator) { }
         public System.Configuration.ConfigurationValidatorBase Validator { get { throw null; } }
     }
+#if CONFIG_DEP
     [System.SerializableAttribute]
     public partial class ConfigurationErrorsException : System.Configuration.ConfigurationException
     {
@@ -284,6 +285,7 @@ namespace System.Configuration
         public static int GetLineNumber(System.Xml.XmlReader reader) { throw null; }
         public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
     }
+#endif
     public partial class ConfigurationFileMap : System.ICloneable
     {
         public ConfigurationFileMap() { }
diff --git a/src/v4.5/System.ServiceModel.Activation.cs b/src/v4.5/System.ServiceModel.Activation.cs
index b9d8eb5..d6cb1ba 100644
--- a/src/v4.5/System.ServiceModel.Activation.cs
+++ b/src/v4.5/System.ServiceModel.Activation.cs
@@ -66,12 +66,18 @@ namespace System.ServiceModel
 namespace System.ServiceModel.Activation
 {
     [System.Runtime.CompilerServices.TypeForwardedFromAttribute("System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
+#if SERVICEMODEL_DEP
     public partial class ServiceHostFactory : System.ServiceModel.Activation.ServiceHostFactoryBase
+#else
+    public partial class ServiceHostFactory
+#endif
     {
         public ServiceHostFactory() { }
+#if SERVICEMODEL_DEP
         [System.MonoTODOAttribute]
         public override System.ServiceModel.ServiceHostBase CreateServiceHost(string constructorString, System.Uri[] baseAddresses) { throw null; }
         [System.MonoTODOAttribute("untested")]
         protected virtual System.ServiceModel.ServiceHost CreateServiceHost(System.Type serviceType, System.Uri[] baseAddresses) { throw null; }
+#endif
     }
 }
diff --git a/src/v4.5/System.Web.cs b/src/v4.5/System.Web.cs
index abcfe9a..237dfab 100644
--- a/src/v4.5/System.Web.cs
+++ b/src/v4.5/System.Web.cs
@@ -4855,8 +4855,10 @@ namespace System.Web.Configuration
         public System.Web.Configuration.WebControlsSection WebControls { get { throw null; } }
         [System.Configuration.ConfigurationPropertyAttribute("webParts")]
         public System.Web.Configuration.WebPartsSection WebParts { get { throw null; } }
+#if SERVICES_DEP
         [System.Configuration.ConfigurationPropertyAttribute("webServices")]
         public System.Web.Services.Configuration.WebServicesSection WebServices { get { throw null; } }
+#endif
         [System.Configuration.ConfigurationPropertyAttribute("xhtmlConformance")]
         public System.Web.Configuration.XhtmlConformanceSection XhtmlConformance { get { throw null; } }
     }
diff --git a/src/v4.5/System.Xml.cs b/src/v4.5/System.Xml.cs
index db7f6ba..a8858e9 100644
--- a/src/v4.5/System.Xml.cs
+++ b/src/v4.5/System.Xml.cs
@@ -3386,6 +3386,7 @@ namespace System.Xml.Serialization.Advanced
         public void Remove(System.Xml.Serialization.Advanced.SchemaImporterExtension extension) { }
     }
 }
+#if CONFIG_DEP
 namespace System.Xml.Serialization.Configuration
 {
     public sealed partial class DateTimeSerializationSection : System.Configuration.ConfigurationSection
@@ -3480,6 +3481,7 @@ namespace System.Xml.XmlConfiguration
         public string ProhibitDefaultResolverString { get { throw null; } set { } }
     }
 }
+#endif
 namespace System.Xml.XPath
 {
     public partial interface IXPathNavigable
diff --git a/src/v4.5/System.cs b/src/v4.5/System.cs
index 4b710fe..3866c12 100644
--- a/src/v4.5/System.cs
+++ b/src/v4.5/System.cs
@@ -5718,6 +5718,7 @@ namespace System.ComponentModel.Design.Serialization
         void System.IDisposable.Dispose() { }
     }
 }
+#if CONFIG_DEP
 namespace System.Configuration
 {
     [System.AttributeUsageAttribute((System.AttributeTargets)(128))]
@@ -6195,6 +6196,7 @@ namespace System.Configuration
         public UserSettingsGroup() { }
     }
 }
+#endif
 namespace System.Diagnostics
 {
     [System.Diagnostics.SwitchLevelAttribute(typeof(bool))]
@@ -6383,12 +6385,14 @@ namespace System.Diagnostics
         public override void TraceEvent(System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message) { }
         public override void TraceEvent(System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args) { }
     }
+#if CONFIG_DEP
     [System.ObsoleteAttribute("This class is obsoleted")]
     public partial class DiagnosticsConfigurationHandler : System.Configuration.IConfigurationSectionHandler
     {
         public DiagnosticsConfigurationHandler() { }
         public virtual object Create(object parent, object configContext, System.Xml.XmlNode section) { throw null; }
     }
+#endif
     public partial class EntryWrittenEventArgs : System.EventArgs
     {
         public EntryWrittenEventArgs() { }
@@ -7442,7 +7446,9 @@ namespace System.Diagnostics
     {
         protected Switch(string displayName, string description) { }
         protected Switch(string displayName, string description, string defaultSwitchValue) { }
+#if XML_DEP
         [System.Xml.Serialization.XmlIgnoreAttribute]
+#endif
         public System.Collections.Specialized.StringDictionary Attributes { get { throw null; } }
         public string Description { get { throw null; } }
         public string DisplayName { get { throw null; } }
@@ -9763,6 +9769,7 @@ namespace System.Net.Cache
         public override string ToString() { throw null; }
     }
 }
+#if CONFIG_DEP
 namespace System.Net.Configuration
 {
     public sealed partial class AuthenticationModuleElement : System.Configuration.ConfigurationElement
@@ -10173,6 +10180,7 @@ namespace System.Net.Configuration
         protected override void PostDeserialize() { }
     }
 }
+#endif
 namespace System.Net.Mail
 {
     public partial class AlternateView : System.Net.Mail.AttachmentBase
@@ -12498,6 +12506,7 @@ namespace System.Security.Authentication.ExtendedProtection
         public System.Security.Authentication.ExtendedProtection.ServiceNameCollection Merge(string serviceName) { throw null; }
     }
 }
+#if CONFIG_DEP
 namespace System.Security.Authentication.ExtendedProtection.Configuration
 {
     [System.MonoTODOAttribute]
@@ -12536,6 +12545,7 @@ namespace System.Security.Authentication.ExtendedProtection.Configuration
         public void RemoveAt(int index) { }
     }
 }
+#endif
 namespace System.Security.Cryptography
 {
     public partial class AsnEncodedData
-- 
2.10.1 (Apple Git-78)

